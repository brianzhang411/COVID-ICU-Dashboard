{"version":3,"sources":["logo.svg","components/DataMap.jsx","components/Title.jsx","App.js","reportWebVitals.js","index.js"],"names":["DataMap","props","state","this","datamap","updateChoropleth","createData","id","style","marginTop","Datamap","element","ReactDOM","findDOMNode","scope","fills","defaultFill","geographyConfig","highlightOnHover","borderColor","highlightBorderWidth","highlightFillColor","geo","highlightBorderColor","popupTemplate","data","properties","name","icuBeds","vaccinesDistributed","vaccinesAdministered","join","responsive","window","innerWidth","document","documentElement","clientWidth","body","dataset","icuValues","jsonReturnedValue","map","obj","minValue","Math","min","apply","maxValue","max","paletteScale","d3","domain","range","forEach","item","iso","icu","distributed","administered","fillColor","mapContainer","initialScreenWidth","currentScreenWidth","containerWidth","width","height","renderMap","resize","labels","labelColor","addEventListener","mapContainerWidth","remove","initialColor","React","Component","Title","textAlign","marginBottom","App","fetch","then","response","json","setState","catch","err","console","log","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"qPAAe,I,6BC8IAA,G,wDAtIT,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,iEAQjBC,KAAKC,QAAQC,iBAAiBF,KAAKG,gB,+BAInC,OACM,mCACE,qBAAKC,GAAG,oBAAoBC,MAAO,CAACC,UAAW,U,kCAMvD,OAAO,IAAIC,IAAQ,CACjBC,QAASC,IAASC,YAAYV,MAC9BW,MAAO,MACPC,MAAO,CAAEC,YAAa,WACtBC,gBAAiB,CACfC,kBAAkB,EAClBC,YAAa,UACbC,qBAAsB,EAEtBC,mBAAoB,SAASC,GACzB,OAAOA,EAAG,WAAiB,WAG/BC,qBAAsB,UACtBC,cAAe,SAASF,EAAKG,GAC3B,MAAO,CAAC,8CACE,WACIH,EAAII,WAAWC,KACnB,YACA,MACE,wBAA0BF,EAAKG,QAAU,IAC3C,OACA,MACE,yBAA2BH,EAAKI,oBAClC,OACA,MACA,0BAA4BJ,EAAKK,qBACjC,OACF,UACCC,KAAK,MAGlBC,YAAY,M,2CAKd,OAAOC,OAAOC,YACVC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,c,mCAMpB,IAAIE,EAAU,GACVC,EAAYrC,KAAKF,MAAMwC,kBAAkBC,KAAI,SAAUC,GACzD,OAAOA,EAAI,MAMTC,EAAWC,KAAKC,IAAIC,MAAM,KAAMP,GAClCQ,EAAWH,KAAKI,IAAIF,MAAM,KAAMP,GAI9BU,EAAeC,MAEhBC,OAAO,CAACR,EAAUI,IAClBK,MAAM,CAAC,UAAW,YAYrB,OAVElD,KAAKF,MAAMwC,kBAAkBa,SAAQ,SAAUC,GAG/C,IAAIC,EAAMD,EAAK,GACbE,EAAMF,EAAK,GACXG,EAAcH,EAAK,GACnBI,EAAeJ,EAAK,GACtBhB,EAAQiB,GAAO,CAAC3B,oBAAqB6B,EAAa5B,qBAAsB6B,EAAc/B,QAAS6B,EAAKG,UAAWV,EAAaO,OAGvHlB,I,0CAEU,IAAD,OACZsB,EAAeV,IAAU,sBACzBW,EAAqB3D,KAAK4D,qBAC1BC,EAAkBF,EAAqB,IAC3C,CAAEG,MAAOH,EAAqB,KAAOI,OAA8B,MAArBJ,EAA+B,MAC7E,CAAEG,MAAO,QAASC,OAAQ,SAC5BL,EAAarD,MAAMwD,GACnB7D,KAAKC,QAAUD,KAAKgE,YACpBhE,KAAKC,QAAQgE,SACbjE,KAAKC,QAAQC,iBAAiBF,KAAKG,cACnCH,KAAKC,QAAQiE,OAAO,CAACC,WAAY,UACjCrC,OAAOsC,iBAAiB,UAAU,WAChC,IAAMR,EAAqB,EAAKA,qBAC1BS,EAAoBX,EAAarD,MAAM,SACzC,EAAKuD,qBAAuB,KAA6B,UAAtBS,GACrCrB,IAAU,OAAOsB,SACjBZ,EAAarD,MAAM,CACjByD,MAAO,QACPC,OAAQ,UAEV,EAAK9D,QAAU,EAAK+D,YACpB,EAAK/D,QAAQgE,SACb,EAAKhE,QAAQC,iBAAiB,EAAKC,cACnC,EAAKF,QAAQiE,OAAO,CAACC,WAAY,WAE1B,EAAKP,sBAAwB,MACpCZ,IAAU,OAAOsB,SACjBZ,EAAarD,MAAM,CACjByD,MAAOF,EAAqB,KAC5BG,OAA8B,MAArBH,EAA+B,OAE1C,EAAK3D,QAAU,EAAK+D,YACpB,EAAK/D,QAAQgE,SACb,EAAKhE,QAAQC,iBAAiB,EAAKqE,gBACnC,EAAKtE,QAAQiE,OAAO,CAACC,WAAY,kB,GAnInBK,IAAMC,YCQbC,MAZf,SAAe5E,GAKX,OACI,8BACI,oBAAIO,MANO,CACfsE,UAAW,SACXC,aAAc,KAIV,mDCmBGC,E,4MArBX9E,MAAQ,CACNuC,kBAAmB,I,kEAGF,IAAD,OAClBwC,MAAM,iFACCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzD,GAAS,EAAK4D,SAAS,CAAE5C,kBAAmBhB,OACjD6D,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,Q,+BAIjC,OACE,sBAAKG,UAAU,MAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,CAASjD,kBAAmBtC,KAAKD,MAAMuC,2B,GAhB3BkC,IAAMC,WCMTe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdhF,IAASuF,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASkE,eAAe,SAM1BV,M","file":"static/js/main.894d1bd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, setState } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as d3 from 'd3';\nimport Datamap from 'datamaps/dist/datamaps.all.min.js';\nimport axios from 'axios';\n\nclass DataMap extends React.Component {\n      \n      constructor(props) {\n        super(props);\n        this.state = {\n          //states\n        };\n      }\n\n      componentDidUpdate() {\n        this.datamap.updateChoropleth(this.createData());\n      }\n\n      render() {\n        return (\n              <>\n                <div id=\"datamap-container\" style={{marginTop: \"\"}}></div>\n              </>\n        );\n      }\n\n      renderMap(){\n        return new Datamap({\n          element: ReactDOM.findDOMNode(this),\n          scope: 'usa',\n          fills: { defaultFill: '#F5F5F5' },\n          geographyConfig: {\n            highlightOnHover: false,\n            borderColor: '#DEDEDE',\n            highlightBorderWidth: 2,\n            // don't change color on mouse hover\n            highlightFillColor: function(geo) {\n                return geo['fillColor'] || '#F5F5F5';\n            },\n            // only change border\n            highlightBorderColor: '#B7B7B7',\n            popupTemplate: function(geo, data) {\n              return ['<div class=\"hoverinfo\" style=\"color:black\">', \n                        '<strong>',\n                            geo.properties.name,\n                        '</strong>',\n                        '<p>',\n                          \"ICU Capacity Filled: \" + data.icuBeds + \"%\",\n                        '</p>',\n                        '<p>',\n                          \"Vaccines Distributed: \" + data.vaccinesDistributed,\n                        '</p>',\n                        '<p>',\n                        \"Vaccines Administered: \" + data.vaccinesAdministered,\n                        '</p>',\n                      '</div>'\n                     ].join('');\n            },\n          },\n          responsive: true\n        });\n      }\n\n      currentScreenWidth(){\n        return window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n      }\n\n\n\n    createData() {\n      var dataset = {};\n      var icuValues = this.props.jsonReturnedValue.map(function (obj) {\n        return obj[1];\n      });\n\n      // We need to colorize every country based on \"numberOfWhatever\"\n      // colors should be uniq for every value.\n      // For this purpose we create palette(using min/max series-value)\n      var minValue = Math.min.apply(null, icuValues),\n        maxValue = Math.max.apply(null, icuValues);\n\n      // create color palette function\n      // color can be whatever you wish\n      var paletteScale = d3\n        .scaleLinear()\n        .domain([minValue, maxValue])\n        .range([\"#72ed85\", \"#f25060\"]); // green-red color range\n\n        this.props.jsonReturnedValue.forEach(function (item) {\n        //\n        // item example value [\"USA\", 70]\n        var iso = item[0],\n          icu = item[1],\n          distributed = item[2],\n          administered = item[3];\n        dataset[iso] = {vaccinesDistributed: distributed, vaccinesAdministered: administered, icuBeds: icu, fillColor: paletteScale(icu) };\n      });\n      \n      return dataset;\n  }\n  componentDidMount() {\n    const mapContainer = d3.select('#datamap-container');\n    const initialScreenWidth = this.currentScreenWidth();\n    const containerWidth = (initialScreenWidth < 600) ?\n      { width: initialScreenWidth + 'px',  height: (initialScreenWidth * 0.5625) + 'px' } :\n      { width: '600px', height: '350px' }\n    mapContainer.style(containerWidth);\n    this.datamap = this.renderMap();\n    this.datamap.resize();\n    this.datamap.updateChoropleth(this.createData());\n    this.datamap.labels({labelColor: 'white'});\n    window.addEventListener('resize', () => {\n      const currentScreenWidth = this.currentScreenWidth();\n      const mapContainerWidth = mapContainer.style('width');\n      if (this.currentScreenWidth() > 600 && mapContainerWidth !== '600px') {\n        d3.select('svg').remove();\n        mapContainer.style({\n          width: '600px',\n          height: '350px'\n        });\n        this.datamap = this.renderMap();\n        this.datamap.resize();\n        this.datamap.updateChoropleth(this.createData());\n        this.datamap.labels({labelColor: 'white'});\n      }\n      else if (this.currentScreenWidth() <= 600) {\n        d3.select('svg').remove();\n        mapContainer.style({\n          width: currentScreenWidth + 'px',\n          height: (currentScreenWidth * 0.5625) + 'px'\n        });\n        this.datamap = this.renderMap();\n        this.datamap.resize();\n        this.datamap.updateChoropleth(this.initialColor());\n        this.datamap.labels({labelColor: 'white'});\n      }\n    });\n  }\n} \nexport default DataMap;\n","import React from 'react';\n\nfunction Title(props) {\n    const titleStyle = {\n        textAlign: \"center\",\n        marginBottom: \"0\",\n    };\n    return (\n        <div>\n            <h1 style={titleStyle}>Covid-19 Hospital Impact Dashboard</h1>\n        </div>\n    );\n}\n\nexport default Title;","import logo from './logo.svg';\nimport React, { useState, setState } from 'react';\nimport './App.css';\nimport DataMap from './components/DataMap.jsx';\nimport Title from './components/Title.jsx';\n\nclass App extends React.Component {\n    state = {\n      jsonReturnedValue: [],\n    }\n\n  componentDidMount() {\n    fetch('https://tranquil-earth-06116.herokuapp.com/https://backend-hex.herokuapp.com/')\n          .then(response => response.json())\n          .then(data => {this.setState({ jsonReturnedValue: data})})\n          .catch(err => {console.log(err);});\n  };\n\n  render () {\n    return(\n      <div className=\"App\">\n      <Title />\n      <DataMap jsonReturnedValue={this.state.jsonReturnedValue}/>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}